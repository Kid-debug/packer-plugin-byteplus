// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package image

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatDataSourceImageConfig is an auto-generated flat version of DataSourceImageConfig.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDataSourceImageConfig struct {
	VolcengineAccessKey  *string          `mapstructure:"access_key" required:"true" cty:"access_key" hcl:"access_key"`
	VolcengineSecretKey  *string          `mapstructure:"secret_key" required:"true" cty:"secret_key" hcl:"secret_key"`
	VolcengineSessionKey *string          `mapstructure:"session_key" required:"false" cty:"session_key" hcl:"session_key"`
	VolcengineEndpoint   *string          `mapstructure:"endpoint" required:"false" cty:"endpoint" hcl:"endpoint"`
	VolcengineDisableSSL *bool            `mapstructure:"disable_ssl" required:"false" cty:"disable_ssl" hcl:"disable_ssl"`
	VolcengineRegion     *string          `mapstructure:"region" required:"true" cty:"region" hcl:"region"`
	ImageId              *string          `mapstructure:"image_id" cty:"image_id" hcl:"image_id"`
	ImageName            *string          `mapstructure:"image_name" cty:"image_name" hcl:"image_name"`
	Platform             *string          `mapstructure:"platform" cty:"platform" hcl:"platform"`
	Status               []string         `mapstructure:"status" cty:"status" hcl:"status"`
	InstanceTypeId       *string          `mapstructure:"instance_type_id" cty:"instance_type_id" hcl:"instance_type_id"`
	Visibility           *string          `mapstructure:"visibility" cty:"visibility" hcl:"visibility"`
	IsSupportCloudInit   *bool            `mapstructure:"is_support_cloud_init" cty:"is_support_cloud_init" hcl:"is_support_cloud_init"`
	IsLTS                *bool            `mapstructure:"is_lts" cty:"is_lts" hcl:"is_lts"`
	ProjectName          *string          `mapstructure:"project_name" cty:"project_name" hcl:"project_name"`
	OsType               *string          `mapstructure:"os_type" cty:"os_type" hcl:"os_type"`
	TagFilters           []FlatTagFilters `mapstructure:"tag_filters" cty:"tag_filters" hcl:"tag_filters"`
}

// FlatMapstructure returns a new FlatDataSourceImageConfig.
// FlatDataSourceImageConfig is an auto-generated flat version of DataSourceImageConfig.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DataSourceImageConfig) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDataSourceImageConfig)
}

// HCL2Spec returns the hcl spec of a DataSourceImageConfig.
// This spec is used by HCL to read the fields of DataSourceImageConfig.
// The decoded values from this spec will then be applied to a FlatDataSourceImageConfig.
func (*FlatDataSourceImageConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"access_key":            &hcldec.AttrSpec{Name: "access_key", Type: cty.String, Required: false},
		"secret_key":            &hcldec.AttrSpec{Name: "secret_key", Type: cty.String, Required: false},
		"session_key":           &hcldec.AttrSpec{Name: "session_key", Type: cty.String, Required: false},
		"endpoint":              &hcldec.AttrSpec{Name: "endpoint", Type: cty.String, Required: false},
		"disable_ssl":           &hcldec.AttrSpec{Name: "disable_ssl", Type: cty.Bool, Required: false},
		"region":                &hcldec.AttrSpec{Name: "region", Type: cty.String, Required: false},
		"image_id":              &hcldec.AttrSpec{Name: "image_id", Type: cty.String, Required: false},
		"image_name":            &hcldec.AttrSpec{Name: "image_name", Type: cty.String, Required: false},
		"platform":              &hcldec.AttrSpec{Name: "platform", Type: cty.String, Required: false},
		"status":                &hcldec.AttrSpec{Name: "status", Type: cty.List(cty.String), Required: false},
		"instance_type_id":      &hcldec.AttrSpec{Name: "instance_type_id", Type: cty.String, Required: false},
		"visibility":            &hcldec.AttrSpec{Name: "visibility", Type: cty.String, Required: false},
		"is_support_cloud_init": &hcldec.AttrSpec{Name: "is_support_cloud_init", Type: cty.Bool, Required: false},
		"is_lts":                &hcldec.AttrSpec{Name: "is_lts", Type: cty.Bool, Required: false},
		"project_name":          &hcldec.AttrSpec{Name: "project_name", Type: cty.String, Required: false},
		"os_type":               &hcldec.AttrSpec{Name: "os_type", Type: cty.String, Required: false},
		"tag_filters":           &hcldec.BlockListSpec{TypeName: "tag_filters", Nested: hcldec.ObjectSpec((*FlatTagFilters)(nil).HCL2Spec())},
	}
	return s
}

// FlatDataSourceImageOutput is an auto-generated flat version of DataSourceImageOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDataSourceImageOutput struct {
	Images []FlatImage `mapstructure:"images" cty:"images" hcl:"images"`
}

// FlatMapstructure returns a new FlatDataSourceImageOutput.
// FlatDataSourceImageOutput is an auto-generated flat version of DataSourceImageOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DataSourceImageOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDataSourceImageOutput)
}

// HCL2Spec returns the hcl spec of a DataSourceImageOutput.
// This spec is used by HCL to read the fields of DataSourceImageOutput.
// The decoded values from this spec will then be applied to a FlatDataSourceImageOutput.
func (*FlatDataSourceImageOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"images": &hcldec.BlockListSpec{TypeName: "images", Nested: hcldec.ObjectSpec((*FlatImage)(nil).HCL2Spec())},
	}
	return s
}

// FlatDetectionItem is an auto-generated flat version of DetectionItem.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDetectionItem struct {
	Name      *string `mapstructure:"name" cty:"name" hcl:"name"`
	Result    *string `mapstructure:"result" cty:"result" hcl:"result"`
	RiskCode  *string `mapstructure:"risk_code" cty:"risk_code" hcl:"risk_code"`
	RiskLevel *string `mapstructure:"risk_level" cty:"risk_level" hcl:"risk_level"`
}

// FlatMapstructure returns a new FlatDetectionItem.
// FlatDetectionItem is an auto-generated flat version of DetectionItem.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DetectionItem) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDetectionItem)
}

// HCL2Spec returns the hcl spec of a DetectionItem.
// This spec is used by HCL to read the fields of DetectionItem.
// The decoded values from this spec will then be applied to a FlatDetectionItem.
func (*FlatDetectionItem) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"name":       &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"result":     &hcldec.AttrSpec{Name: "result", Type: cty.String, Required: false},
		"risk_code":  &hcldec.AttrSpec{Name: "risk_code", Type: cty.String, Required: false},
		"risk_level": &hcldec.AttrSpec{Name: "risk_level", Type: cty.String, Required: false},
	}
	return s
}

// FlatDetectionResults is an auto-generated flat version of DetectionResults.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDetectionResults struct {
	DetectionStatus *string             `mapstructure:"detection_status" cty:"detection_status" hcl:"detection_status"`
	Items           []FlatDetectionItem `mapstructure:"items" cty:"items" hcl:"items"`
}

// FlatMapstructure returns a new FlatDetectionResults.
// FlatDetectionResults is an auto-generated flat version of DetectionResults.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DetectionResults) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDetectionResults)
}

// HCL2Spec returns the hcl spec of a DetectionResults.
// This spec is used by HCL to read the fields of DetectionResults.
// The decoded values from this spec will then be applied to a FlatDetectionResults.
func (*FlatDetectionResults) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"detection_status": &hcldec.AttrSpec{Name: "detection_status", Type: cty.String, Required: false},
		"items":            &hcldec.BlockListSpec{TypeName: "items", Nested: hcldec.ObjectSpec((*FlatDetectionItem)(nil).HCL2Spec())},
	}
	return s
}

// FlatImage is an auto-generated flat version of Image.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatImage struct {
	ImageId                  *string               `mapstructure:"image_id" cty:"image_id" hcl:"image_id"`
	ImageName                *string               `mapstructure:"image_name" cty:"image_name" hcl:"image_name"`
	Description              *string               `mapstructure:"description" cty:"description" hcl:"description"`
	Platform                 *string               `mapstructure:"platform" cty:"platform" hcl:"platform"`
	PlatformVersion          *string               `mapstructure:"platform_version" cty:"platform_version" hcl:"platform_version"`
	Visibility               *string               `mapstructure:"visibility" cty:"visibility" hcl:"visibility"`
	IsSupportCloudInit       *bool                 `mapstructure:"is_support_cloud_init" cty:"is_support_cloud_init" hcl:"is_support_cloud_init"`
	OsType                   *string               `mapstructure:"os_type" cty:"os_type" hcl:"os_type"`
	Status                   *string               `mapstructure:"status" cty:"status" hcl:"status"`
	Architecture             *string               `mapstructure:"architecture" cty:"architecture" hcl:"architecture"`
	OsName                   *string               `mapstructure:"os_name" cty:"os_name" hcl:"os_name"`
	ShareStatus              *string               `mapstructure:"share_status" cty:"share_status" hcl:"share_status"`
	Size                     *int32                `mapstructure:"size" cty:"size" hcl:"size"`
	BootMode                 *string               `mapstructure:"boot_mode" cty:"boot_mode" hcl:"boot_mode"`
	CreatedAt                *string               `mapstructure:"created_at" cty:"created_at" hcl:"created_at"`
	UpdatedAt                *string               `mapstructure:"updated_at" cty:"updated_at" hcl:"updated_at"`
	LicenseType              *string               `mapstructure:"license_type" cty:"license_type" hcl:"license_type"`
	IsLTS                    *bool                 `mapstructure:"is_lts" cty:"is_lts" hcl:"is_lts"`
	ImageOwnerId             *string               `mapstructure:"image_owner_id" cty:"image_owner_id" hcl:"image_owner_id"`
	Tags                     []FlatTag             `mapstructure:"tags" cty:"tags" hcl:"tags"`
	Kernel                   *string               `mapstructure:"kernel" cty:"kernel" hcl:"kernel"`
	IsInstallRunCommandAgent *bool                 `mapstructure:"is_install_run_command_agent" cty:"is_install_run_command_agent" hcl:"is_install_run_command_agent"`
	ProjectName              *string               `mapstructure:"project_name" cty:"project_name" hcl:"project_name"`
	DetectionResults         *FlatDetectionResults `mapstructure:"detection_results" cty:"detection_results" hcl:"detection_results"`
}

// FlatMapstructure returns a new FlatImage.
// FlatImage is an auto-generated flat version of Image.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Image) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatImage)
}

// HCL2Spec returns the hcl spec of a Image.
// This spec is used by HCL to read the fields of Image.
// The decoded values from this spec will then be applied to a FlatImage.
func (*FlatImage) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"image_id":                     &hcldec.AttrSpec{Name: "image_id", Type: cty.String, Required: false},
		"image_name":                   &hcldec.AttrSpec{Name: "image_name", Type: cty.String, Required: false},
		"description":                  &hcldec.AttrSpec{Name: "description", Type: cty.String, Required: false},
		"platform":                     &hcldec.AttrSpec{Name: "platform", Type: cty.String, Required: false},
		"platform_version":             &hcldec.AttrSpec{Name: "platform_version", Type: cty.String, Required: false},
		"visibility":                   &hcldec.AttrSpec{Name: "visibility", Type: cty.String, Required: false},
		"is_support_cloud_init":        &hcldec.AttrSpec{Name: "is_support_cloud_init", Type: cty.Bool, Required: false},
		"os_type":                      &hcldec.AttrSpec{Name: "os_type", Type: cty.String, Required: false},
		"status":                       &hcldec.AttrSpec{Name: "status", Type: cty.String, Required: false},
		"architecture":                 &hcldec.AttrSpec{Name: "architecture", Type: cty.String, Required: false},
		"os_name":                      &hcldec.AttrSpec{Name: "os_name", Type: cty.String, Required: false},
		"share_status":                 &hcldec.AttrSpec{Name: "share_status", Type: cty.String, Required: false},
		"size":                         &hcldec.AttrSpec{Name: "size", Type: cty.Number, Required: false},
		"boot_mode":                    &hcldec.AttrSpec{Name: "boot_mode", Type: cty.String, Required: false},
		"created_at":                   &hcldec.AttrSpec{Name: "created_at", Type: cty.String, Required: false},
		"updated_at":                   &hcldec.AttrSpec{Name: "updated_at", Type: cty.String, Required: false},
		"license_type":                 &hcldec.AttrSpec{Name: "license_type", Type: cty.String, Required: false},
		"is_lts":                       &hcldec.AttrSpec{Name: "is_lts", Type: cty.Bool, Required: false},
		"image_owner_id":               &hcldec.AttrSpec{Name: "image_owner_id", Type: cty.String, Required: false},
		"tags":                         &hcldec.BlockListSpec{TypeName: "tags", Nested: hcldec.ObjectSpec((*FlatTag)(nil).HCL2Spec())},
		"kernel":                       &hcldec.AttrSpec{Name: "kernel", Type: cty.String, Required: false},
		"is_install_run_command_agent": &hcldec.AttrSpec{Name: "is_install_run_command_agent", Type: cty.Bool, Required: false},
		"project_name":                 &hcldec.AttrSpec{Name: "project_name", Type: cty.String, Required: false},
		"detection_results":            &hcldec.BlockSpec{TypeName: "detection_results", Nested: hcldec.ObjectSpec((*FlatDetectionResults)(nil).HCL2Spec())},
	}
	return s
}

// FlatTag is an auto-generated flat version of Tag.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatTag struct {
	Key   *string `mapstructure:"key" cty:"key" hcl:"key"`
	Value *string `mapstructure:"value" cty:"value" hcl:"value"`
}

// FlatMapstructure returns a new FlatTag.
// FlatTag is an auto-generated flat version of Tag.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Tag) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatTag)
}

// HCL2Spec returns the hcl spec of a Tag.
// This spec is used by HCL to read the fields of Tag.
// The decoded values from this spec will then be applied to a FlatTag.
func (*FlatTag) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"key":   &hcldec.AttrSpec{Name: "key", Type: cty.String, Required: false},
		"value": &hcldec.AttrSpec{Name: "value", Type: cty.String, Required: false},
	}
	return s
}

// FlatTagFilters is an auto-generated flat version of TagFilters.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatTagFilters struct {
	Key    *string  `mapstructure:"key" cty:"key" hcl:"key"`
	Values []string `mapstructure:"values" cty:"values" hcl:"values"`
}

// FlatMapstructure returns a new FlatTagFilters.
// FlatTagFilters is an auto-generated flat version of TagFilters.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*TagFilters) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatTagFilters)
}

// HCL2Spec returns the hcl spec of a TagFilters.
// This spec is used by HCL to read the fields of TagFilters.
// The decoded values from this spec will then be applied to a FlatTagFilters.
func (*FlatTagFilters) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"key":    &hcldec.AttrSpec{Name: "key", Type: cty.String, Required: false},
		"values": &hcldec.AttrSpec{Name: "values", Type: cty.List(cty.String), Required: false},
	}
	return s
}
